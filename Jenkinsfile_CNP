#!groovy

@Library("Infrastructure")

String product = "probate"
String component = "submit-service"

List<LinkedHashMap<String, Object>> secrets = [
    secret('probatePersistenceUrl', 'TEST_PERSISTENCE_URL'),
    secret('probateBusinessUrl', 'TEST_BUSINESS_URL'),
    secret('probateS2SKey', 'S2S_AUTH_TOTP_SECRET'),
    secret('probateIdamSecret', 'IDAM_SECRET'),
    secret('probateIdamUserName', 'IDAM_USERNAME'),
    secret('probateIdamPassword', 'IDAM_PASSWORD'),
    secret('probateCcdDataStoreApi', 'CCD_DATA_STORE_API_URL'),
    secret('probateServiceAuthUrl', 'SERVICE_AUTH_PROVIDER_BASE_URL'),
    secret('probateUserAuthUrl', 'USER_AUTH_PROVIDER_OAUTH2_URL'),
    secret('probateIdamOauthRedirectUrl', 'IDAM_OAUTH2_REDIRECT_URI'),
    secret('spring-application-json-submit-service-azure', 'SUB_SER_SPRING_JSON1'),
    secret('probate-mail-host', 'PROBATE_SUB_MAIL_HOST'),
    secret('probate-mail-username', 'PROBATE_SUB_MAIL_USERNAME'),
    secret('probate-mail-password', 'PROBATE_SUB_MAIL_PASSWORD'),
    secret('probate-mail-port', 'PROBATE_SUB_MAIL_PORT'),
    secret('probate-mail-sender', 'PROBATE_SUB_MAIL_SENDER'),
    secret('probate-mail-recipient', 'PROBATE_SUB_MAIL_REC')
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [ $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    version: '',
    envVariable: envVar
  ]
}

withPipeline("java", product, component) {
  env.SUB_SER_SPRING_JSON = '{"registries":[{"address":"Digital Application\nOxford District Probate Registry\nCombined Court Building\nSt Aldates\nOxford\nOX1 1LY","email":"test.probate.inbox@gmail.com","id":0,"name":"oxford"},{"address":"Digital Application\nBirmingham Probate Registry\nThe Priory Courts\n33 Bull Street\nBirmingham\nWest Midlands\nB4 6DU\n","email":"test2.probate.inbox@gmail.com","id":1,"name":"birmingham"},{"address":"Digital Applications\nManchester District Probate Registry\nCivil Justice Centre\nGround Floor\n1 Bridge Street West\nP.O. BOX 4240\nManchester\nM60 1WJ","email":"test3.probate.inbox@gmail.com","id":2,"name":"manchester"}]}'
  setVaultName('probate')
  loadVaultSecrets(secrets)
  enableSlackNotifications('#probate-jenkins')
  enableDockerBuild()
  enableDeployToAKS()

  after('test') {
    try {
       // sh './gradlew pitest'
    } finally {
        //steps.archiveArtifacts "build/reports/pitest/**/*.*"
    }

    junit 'build/test-results/test/**/*.xml'
    archiveArtifacts 'build/reports/tests/test/index.html'
    publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "build/reports/tests/test",
            reportFiles          : "index.html",
            reportName           : "probate-submit-service Test Report"
    ]

    publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "build/reports/jacoco",
            reportFiles          : "index.html",
            reportName           : "probate-submit-service Code Coverage Report"
    ]

    publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "build/reports/findbugs",
            reportFiles          : "main.html",
            reportName           : "probate-submit-service find Bugs Report"
    ]
  }

  after('functionalTest:aat') {
      publishHTML target: [
              reportDir            : "target/site/serenity/",
              reportFiles          : "index.html",
              reportName           : "AAT Functional Tests",
              alwaysLinkToLastBuild: true
      ]
  }

  after('functionalTest:spreview') {
      publishHTML target: [
              reportDir            : "target/site/serenity/",
              reportFiles          : "index.html",
              reportName           : "Preview Functional Tests",
              alwaysLinkToLastBuild: true
      ]
  }
}
